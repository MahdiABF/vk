name: Build APK (Debug, robust)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    # run steps inside an ubuntu container (no sudo required inside container)
    container:
      image: ubuntu:24.04

    env:
      # SDK will be installed inside the repo workspace
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      # keep PATH minimal here; we'll also append PATH via GITHUB_ENV in a step
      # (don't rely on runner.* variables to avoid earlier errors)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install base system packages (no sudo inside container)
      run: |
        apt-get update -y
        apt-get install -y --no-install-recommends \
          curl wget unzip zip tar git python3-pip python3-setuptools python3-wheel \
          openjdk-17-jdk build-essential ca-certificates \
          libstdc++6 libz-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libncurses6
        # make sure python3 and pip are callable
        python3 --version
        pip3 --version
        # use pip3 as pip
        ln -sf $(which pip3) /usr/local/bin/pip || true

    - name: Install Buildozer & Cython (pip)
      run: |
        pip install --upgrade pip setuptools wheel
        pip install cython==0.29.36 buildozer

    - name: Download Android cmdline-tools (robust extract)
      run: |
        mkdir -p "$ANDROID_HOME"
        cd "$ANDROID_HOME"
        CMDLINE_ZIP=commandlinetools-linux-9477386_latest.zip
        curl -L -o "$CMDLINE_ZIP" "https://dl.google.com/android/repository/${CMDLINE_ZIP}"
        # extract into tmpdir to avoid mv-into-self issues
        unzip -q "$CMDLINE_ZIP" -d tmpcmd
        mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
        # tmpcmd usually contains a 'cmdline-tools' directory â€” move its contents into latest
        if [ -d tmpcmd/cmdline-tools ]; then
          mv tmpcmd/cmdline-tools/* "$ANDROID_HOME/cmdline-tools/latest/"
        else
          mv tmpcmd/* "$ANDROID_HOME/cmdline-tools/latest/"
        fi
        rm -rf tmpcmd "$CMDLINE_ZIP"

    - name: Expose Android SDK tools to PATH and verify sdkmanager
      run: |
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
        # use the sdkmanager from the just-installed cmdline-tools
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
      # after this step, PATH and ANDROID_HOME are available to later steps via GITHUB_ENV

    - name: Accept licenses and install platform-tools, build-tools, NDK
      run: |
        # use full path to sdkmanager to be explicit
        SDKMAN="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
        yes | $SDKMAN --sdk_root="$ANDROID_HOME" --licenses
        $SDKMAN --sdk_root="$ANDROID_HOME" "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

    - name: Verify sdkmanager, adb, aapt
      run: |
        echo "ANDROID_HOME = $ANDROID_HOME"
        ls -la "$ANDROID_HOME"
        which adb || true
        "$ANDROID_HOME/platform-tools/adb" version || true
        # check aapt/aidl in build-tools
        if [ -d "$ANDROID_HOME/build-tools/33.0.2" ]; then
          ls -la "$ANDROID_HOME/build-tools/33.0.2" | head -n 40
        fi

    - name: Build debug APK (Buildozer)
      run: |
        # Ensure buildozer.spec has: source.dir = . and version = 0.1 (or appropriate)
        # Use python3 as Buildozer expects system python; ensure it's in PATH
        buildozer android debug
      env:
        # make sure Buildozer sees ANDROID_HOME (already set in GITHUB_ENV) and JAVA_HOME
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: bin/*.apk
