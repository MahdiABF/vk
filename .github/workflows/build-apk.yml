name: Build APK (non-container, robust)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      # SDK root inside workspace (will chown to builder)
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install base packages (sudo available on runner)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            git curl wget unzip zip tar build-essential ca-certificates \
            openjdk-17-jdk python3 python3-pip python3-setuptools python3-dev \
            python3-wheel python3-venv pkg-config \
            libstdc++6 libz-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libncurses6
          # sanity checks
          java -version || true
          python3 --version
          pip3 --version

      - name: Install Buildozer & Cython system-wide (avoid PEP 668 issues)
        run: |
          # upgrade pip system-wide (allow break-system-packages)
          python3 -m pip install --break-system-packages --upgrade pip setuptools wheel
          # install buildozer and cython system-wide; use break-system-packages to bypass PEP-668 on hosted runner
          python3 -m pip install --break-system-packages buildozer cython==0.29.36
          # confirm
          which buildozer || true
          buildozer --version

      - name: Ensure buildozer.spec has minimal tokens (source.dir, version)
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "Error: buildozer.spec not found in repo root" >&2
            exit 1
          fi
          if ! grep -qE '^source\.dir\s*=' buildozer.spec; then
            echo "" >> buildozer.spec
            echo "# auto-added by CI: ensure project root is used" >> buildozer.spec
            echo "source.dir = ." >> buildozer.spec
            echo "Added source.dir = . to buildozer.spec"
          fi
          if ! grep -qE '^version\s*=' buildozer.spec; then
            echo "" >> buildozer.spec
            echo "# auto-added by CI: default version" >> buildozer.spec
            echo "version = 0.1" >> buildozer.spec
            echo "Added version = 0.1 to buildozer.spec"
          fi
          echo "----- buildozer.spec (tail) -----"
          tail -n 40 buildozer.spec || true

      - name: Create non-root builder user and prepare folders
        run: |
          # create 'builder' user if not exists (safer check)
          if ! id builder >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash builder
          fi

          # create ANDROID_HOME and ensure builder owns the SDK path only
          sudo mkdir -p "$ANDROID_HOME"
          sudo chown -R builder:builder "$ANDROID_HOME"
          sudo chmod -R u+rwX,go+rX "$ANDROID_HOME" || true

          # do NOT chown the whole GITHUB_WORKSPACE — leave repo owned by runner
          echo "Note: leaving ${GITHUB_WORKSPACE} ownership unchanged to avoid git permission issues."


      - name: Download and install Android cmdline-tools (robust)
        run: |
          set -e
          CMDLINE_ZIP="commandlinetools-linux-9477386_latest.zip"
          # 1) download into /tmp (safe writeable location)
          TMP_ZIP="/tmp/${CMDLINE_ZIP}"
          curl -L -o "$TMP_ZIP" "https://dl.google.com/android/repository/${CMDLINE_ZIP}"
          # 2) extract into a tmpdir to avoid mv-into-self problems
          TMPDIR="$(mktemp -d)"
          unzip -q "$TMP_ZIP" -d "$TMPDIR"
          # 3) ensure target exists
          sudo mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
          # 4) move extracted content into latest (handle different archive structures)
          if [ -d "$TMPDIR/cmdline-tools" ]; then
            sudo mv "$TMPDIR/cmdline-tools/"* "$ANDROID_HOME/cmdline-tools/latest/"
          else
            sudo mv "$TMPDIR"/* "$ANDROID_HOME/cmdline-tools/latest/"
          fi
          # 5) cleanup
          rm -rf "$TMPDIR" "$TMP_ZIP"
          # 6) set ownership so non-root builder can use SDK
          if id builder >/dev/null 2>&1; then
            sudo chown -R builder:builder "$ANDROID_HOME"
          else
            # fallback: chown to current runner user
            CURRENT_USER="$(id -un)"
            sudo chown -R "${CURRENT_USER}:${CURRENT_USER}" "$ANDROID_HOME" || true
          fi

      - name: Install Android SDK packages (platform-tools, build-tools, ndk)
        run: |
          SDKMAN="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          # ensure sdkmanager executable permission
          sudo chmod +x "$SDKMAN" || true
          # accept licenses and install packages (run as root to avoid permission problems)
          yes | sudo "$SDKMAN" --sdk_root="$ANDROID_HOME" --licenses
          sudo "$SDKMAN" --sdk_root="$ANDROID_HOME" "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"
          # chown sdk to builder so pip --user and android build tools can be used by builder
          sudo chown -R builder:builder "$ANDROID_HOME"

      - name: Verify SDK and tools
        run: |
          echo "ANDROID_HOME=${ANDROID_HOME}"
          ls -la "$ANDROID_HOME" | head -n 40
          if [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --version || true
          fi
          if [ -x "$ANDROID_HOME/platform-tools/adb" ]; then
            "$ANDROID_HOME/platform-tools/adb" version || true
          fi

      - name: Prepare perms and build as builder (fixed — use copy of workspace)
        env:
          ANDROID_HOME: ${{ github.workspace }}/android-sdk
        run: |
          set -e
          # original runner user (so we can restore ownership later)
          RUNNER_USER="$(id -un)"
          echo "Runner user is: $RUNNER_USER"

          # prepare a private build copy (exclude .git to avoid messing with git internals)
          BUILD_WORKDIR="/tmp/ci_build_workspace"
          sudo rm -rf "$BUILD_WORKDIR"
          sudo mkdir -p "$BUILD_WORKDIR"

          # copy repository contents except .git into build workdir
          # use rsync if available (preserves permissions nicely), fall back to tar if not
          if command -v rsync >/dev/null 2>&1; then
            rsync -a --delete --exclude '.git' "${GITHUB_WORKSPACE}/" "$BUILD_WORKDIR/"
          else
            (cd "${GITHUB_WORKSPACE}" && tar -cf - --exclude=.git .) | (cd "$BUILD_WORKDIR" && sudo tar -xpf -)
          fi

          # give ownership of build workspace to builder
          sudo chown -R builder:builder "$BUILD_WORKDIR"
          sudo chmod -R u+rwX,go+rX "$BUILD_WORKDIR"

          # create the build script (with expanded paths pointing to BUILD_WORKDIR)
          CI_SCRIPT_TMP="/tmp/ci_build.sh"
          cat > "$CI_SCRIPT_TMP" <<BASH
          ‍#‍‍!/bin/bash
          set -e
          export ANDROID_HOME="${ANDROID_HOME}"
          export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
          export PATH="/usr/local/bin:/usr/bin:\$PATH:\${ANDROID_HOME}/cmdline-tools/latest/bin:\${ANDROID_HOME}/platform-tools"
          cd "${BUILD_WORKDIR}"
          echo "Running build as: \$(whoami)"
          echo "Workdir: \$(pwd)"
          if ! command -v buildozer >/dev/null 2>&1; then
            echo "Error: buildozer not found in PATH" >&2
          exit 2
          fi
          # build (verbose for good logs)
          yes | buildozer --verbose android debug
          BASH

          # set permissions and run as builder
          sudo chmod 755 "$CI_SCRIPT_TMP"
          sudo chown builder:builder "$CI_SCRIPT_TMP"
          sudo -H -u builder bash "$CI_SCRIPT_TMP" || { echo "Builder run failed"; exit 1; }

          # after build, ensure runner can read artifacts: chown back to runner user
          sudo chown -R "${RUNNER_USER}:${RUNNER_USER}" "$BUILD_WORKDIR" || true
          # make sure artifact files are world-readable if chown fails for any reason
          sudo find "$BUILD_WORKDIR" -type f -exec chmod a+r {} \; || true

          # copy APK(s) back to the original workspace for upload (optional)
          mkdir -p "${GITHUB_WORKSPACE}/.ci_artifacts"
          sudo cp -v "$BUILD_WORKDIR"/bin/*.apk "${GITHUB_WORKSPACE}/.ci_artifacts/" || true


      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: .ci_artifacts/*.apk
