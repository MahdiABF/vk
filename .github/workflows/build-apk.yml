name: Build APK (non-container, robust)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      # SDK root inside workspace (will chown to builder)
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install base packages (sudo available on runner)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            git curl wget unzip zip tar build-essential ca-certificates \
            openjdk-17-jdk python3 python3-pip python3-setuptools python3-dev \
            python3-wheel python3-venv pkg-config \
            libstdc++6 libz-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libncurses6
          # sanity checks
          java -version || true
          python3 --version
          pip3 --version

      - name: Install Buildozer & Cython system-wide (avoid PEP 668 issues)
        run: |
          # upgrade pip system-wide (allow break-system-packages)
          python3 -m pip install --break-system-packages --upgrade pip setuptools wheel
          # install buildozer and cython system-wide; use break-system-packages to bypass PEP-668 on hosted runner
          python3 -m pip install --break-system-packages buildozer cython==0.29.36
          # confirm
          which buildozer || true
          buildozer --version

      - name: Ensure buildozer.spec has minimal tokens (source.dir, version)
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "Error: buildozer.spec not found in repo root" >&2
            exit 1
          fi
          if ! grep -qE '^source\.dir\s*=' buildozer.spec; then
            echo "" >> buildozer.spec
            echo "# auto-added by CI: ensure project root is used" >> buildozer.spec
            echo "source.dir = ." >> buildozer.spec
            echo "Added source.dir = . to buildozer.spec"
          fi
          if ! grep -qE '^version\s*=' buildozer.spec; then
            echo "" >> buildozer.spec
            echo "# auto-added by CI: default version" >> buildozer.spec
            echo "version = 0.1" >> buildozer.spec
            echo "Added version = 0.1 to buildozer.spec"
          fi
          echo "----- buildozer.spec (tail) -----"
          tail -n 40 buildozer.spec || true

      - name: Create non-root builder user and prepare folders
        run: |
          # create 'builder' user if not exists
          if ! id builder >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash builder
          fi
          sudo mkdir -p "$ANDROID_HOME"
          # ensure workspace and android sdk owned by builder
          sudo chown -R builder:builder "${GITHUB_WORKSPACE}"
          sudo chown -R builder:builder "$ANDROID_HOME"
      - name: Download and install Android cmdline-tools (robust)
        run: |
          set -e
          CMDLINE_ZIP="commandlinetools-linux-9477386_latest.zip"
          # 1) download into /tmp (safe writeable location)
          TMP_ZIP="/tmp/${CMDLINE_ZIP}"
          curl -L -o "$TMP_ZIP" "https://dl.google.com/android/repository/${CMDLINE_ZIP}"
          # 2) extract into a tmpdir to avoid mv-into-self problems
          TMPDIR="$(mktemp -d)"
          unzip -q "$TMP_ZIP" -d "$TMPDIR"
          # 3) ensure target exists
          sudo mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
          # 4) move extracted content into latest (handle different archive structures)
          if [ -d "$TMPDIR/cmdline-tools" ]; then
            sudo mv "$TMPDIR/cmdline-tools/"* "$ANDROID_HOME/cmdline-tools/latest/"
          else
            sudo mv "$TMPDIR"/* "$ANDROID_HOME/cmdline-tools/latest/"
          fi
          # 5) cleanup
          rm -rf "$TMPDIR" "$TMP_ZIP"
          # 6) set ownership so non-root builder can use SDK
          if id builder >/dev/null 2>&1; then
            sudo chown -R builder:builder "$ANDROID_HOME"
          else
            # if builder doesn't exist, fallback to workspace owner
            sudo chown -R "$(id -u -n)" "$(id -u -n)" "$ANDROID_HOME" || true
          fi
      - name: Install Android SDK packages (platform-tools, build-tools, ndk)
        run: |
          SDKMAN="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          # ensure sdkmanager executable permission
          sudo chmod +x "$SDKMAN" || true
          # accept licenses and install packages (run as root to avoid permission problems)
          yes | sudo "$SDKMAN" --sdk_root="$ANDROID_HOME" --licenses
          sudo "$SDKMAN" --sdk_root="$ANDROID_HOME" "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"
          # chown sdk to builder so pip --user and android build tools can be used by builder
          sudo chown -R builder:builder "$ANDROID_HOME"

      - name: Verify SDK and tools
        run: |
          echo "ANDROID_HOME=${ANDROID_HOME}"
          ls -la "$ANDROID_HOME" | head -n 40
          if [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --version || true
          fi
          if [ -x "$ANDROID_HOME/platform-tools/adb" ]; then
            "$ANDROID_HOME/platform-tools/adb" version || true
          fi
      - name: Build debug APK as builder (non-root) — robust script
        run: |
          set -e
          # مسیر اسکریپت داخل workspace
          CI_SCRIPT="${GITHUB_WORKSPACE}/ci_build.sh"

          # 1) ایجاد اسکریپت با مقدارهای ثابت (مقادیر ANDROID_HOME و GITHUB_WORKSPACE از قبل در runner تعیین شده‌اند)
          cat > "$CI_SCRIPT" <<BASH
          #!/bin/bash
          set -e
          # مقادیر درج‌شده در زمان نوشتن فایل توسط outer shell پر می‌شوند:
          export ANDROID_HOME="${ANDROID_HOME}"
          export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
          # PATH شامل ابزارهای SDK و مسیرهای معمولی است (داخل اسکریپت \$PATH نگه داشته می‌شود)
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:/usr/local/bin:/usr/bin:\$PATH"

          # برو به workspace (مسیر ثابت)
          cd "${GITHUB_WORKSPACE}"

          echo "Running build as: \$(whoami)"
          echo "Working dir: \$(pwd)"
          echo "ANDROID_HOME = \$ANDROID_HOME"
          echo "Java: \$(java -version 2>&1 | head -n 1)"

          # ensure buildozer exists
          if ! command -v buildozer >/dev/null 2>&1; then
            echo "Error: buildozer not found in PATH" >&2
            exit 2
          fi

          # run buildozer non-interactively (pipe yes)
          yes | buildozer --verbose android debug
          BASH

          # 2) تنظیم مالکیت و اجراپذیری اسکریپت برای builder
          sudo chown builder:builder "$CI_SCRIPT"
          sudo chmod +x "$CI_SCRIPT"

          # 3) اجرای اسکریپت تحت کاربر builder (بدون مشکل env/permission)
          sudo -H -u builder bash "$CI_SCRIPT"
        env:
          # تضمین اینکه مقدار ANDROID_HOME به ساب‌شل منتقل شود (مگر اینکه قبلاً با GITHUB_ENV ست شده باشد)
          ANDROID_HOME: ${{ github.workspace }}/android-sdk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: bin/*.apk
